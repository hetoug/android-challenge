---
    format_version: '8'
    default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
    project_type: android
    workflows:
      deployDev:
        description: |
          ## How to get a signed APK
    ​
          This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:
    ​
          1. Click on **Code Signing** tab
          1. Find the **ANDROID KEYSTORE FILE** section
          1. Click or drop your file on the upload file field
          1. Fill the displayed 3 input fields:
           1. **Keystore password**
           1. **Keystore alias**
           1. **Private key password**
          1. Click on **[Save metadata]** button
    ​
          That's it! From now on, **Sign APK** step will receive your uploaded files.
    ​
          ## To run this workflow
    ​
          If you want to run this workflow manually:
    ​
          1. Open the app's build list page
          2. Click on **[Start/Schedule a Build]** button
          3. Select **deploy** in **Workflow** dropdown input
          4. Click **[Start Build]** button
    ​
          Or if you need this workflow to be started by a GIT event:
    ​
          1. Click on **Triggers** tab
          2. Setup your desired event (push/tag/pull) and select **deploy** workflow
          3. Click on **[Done]** and then **[Save]** buttons
    ​
          The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
        steps:
        - activate-ssh-key@4.0.3:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone@4.0.14: {}
        - cache-pull@2.0.1: {}
        - install-missing-android-tools@2.3.5:
            inputs:
            - gradlew_path: "$PROJECT_LOCATION/gradlew"
        - change-android-versioncode-and-versionname@1.1.1:
            inputs:
            - version_code_offset: '1000'
            - build_gradle_path: "$PROJECT_LOCATION/$MODULE/build.gradle"
        - android-build@0.10.0:
            inputs:
            - project_location: "$PROJECT_LOCATION"
            - module: "$MODULE"
            - variant: "$VARIANT"
        - script@1.1.5:
            inputs:
            - is_debug: 'yes'
            - content: |-
                #!/usr/bin/env bash
                chmod +x ./upload/aapt && chmod +x ./upload/upload.sh
                ./upload/upload.sh -apk $BITRISE_APK_PATH -env DEV -m "$GIT_CLONE_COMMIT_MESSAGE_SUBJECT"
        - cache-push@2.2.0: {}
        envs:
        - opts:
            is_expand: false
          VARIANT: prodDebug
      deployStage:
        description: |
          ## How to get a signed APK
    ​
          This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:
    ​
          1. Click on **Code Signing** tab
          1. Find the **ANDROID KEYSTORE FILE** section
          1. Click or drop your file on the upload file field
          1. Fill the displayed 3 input fields:
           1. **Keystore password**
           1. **Keystore alias**
           1. **Private key password**
          1. Click on **[Save metadata]** button
    ​
          That's it! From now on, **Sign APK** step will receive your uploaded files.
    ​
          ## To run this workflow
    ​
          If you want to run this workflow manually:
    ​
          1. Open the app's build list page
          2. Click on **[Start/Schedule a Build]** button
          3. Select **deploy** in **Workflow** dropdown input
          4. Click **[Start Build]** button
    ​
          Or if you need this workflow to be started by a GIT event:
    ​
          1. Click on **Triggers** tab
          2. Setup your desired event (push/tag/pull) and select **deploy** workflow
          3. Click on **[Done]** and then **[Save]** buttons
    ​
          The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
        steps:
        - activate-ssh-key@4.0.3:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone@4.0.14: {}
        - cache-pull@2.0.1: {}
        - install-missing-android-tools@2.3.5:
            inputs:
            - gradlew_path: "$PROJECT_LOCATION/gradlew"
        - change-android-versioncode-and-versionname@1.1.1:
            inputs:
            - version_code_offset: '1000'
            - build_gradle_path: "$PROJECT_LOCATION/$MODULE/build.gradle"
        - android-build@0.10.0:
            inputs:
            - project_location: "$PROJECT_LOCATION"
            - module: "$MODULE"
            - variant: "$VARIANT"
        - script@1.1.5:
            inputs:
            - content: "#!/usr/bin/env bash\n\necho $BITRISE_APK_PATH\necho $BITRISE_APK_PATH_LIST\necho
                $BITRISE_APP_DIR_PATH\necho $GIT_CLONE_COMMIT_AUTHOR_NAME \necho $GIT_CLONE_COMMIT_MESSAGE_BODY\necho
                $GIT_CLONE_COMMIT_MESSAGE_SUBJECT\n\nchmod +x ./upload/aapt && chmod +x
                ./upload/upload.sh\n./upload/upload.sh -apk $BITRISE_APK_PATH -env STAGE
                -m \"$GIT_CLONE_COMMIT_MESSAGE_SUBJECT\""
        - cache-push@2.2.0: {}
        envs:
        - opts:
            is_expand: false
          VARIANT: prodStage
      deployProd:
        description: |
          ## How to get a signed APK
    ​
          This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:
    ​
          1. Click on **Code Signing** tab
          1. Find the **ANDROID KEYSTORE FILE** section
          1. Click or drop your file on the upload file field
          1. Fill the displayed 3 input fields:
           1. **Keystore password**
           1. **Keystore alias**
           1. **Private key password**
          1. Click on **[Save metadata]** button
    ​
          That's it! From now on, **Sign APK** step will receive your uploaded files.
    ​
          ## To run this workflow
    ​
          If you want to run this workflow manually:
    ​
          1. Open the app's build list page
          2. Click on **[Start/Schedule a Build]** button
          3. Select **deploy** in **Workflow** dropdown input
          4. Click **[Start Build]** button
    ​
          Or if you need this workflow to be started by a GIT event:
    ​
          1. Click on **Triggers** tab
          2. Setup your desired event (push/tag/pull) and select **deploy** workflow
          3. Click on **[Done]** and then **[Save]** buttons
    ​
          The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
        steps:
        - activate-ssh-key@4.0.3:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone@4.0.14: {}
        - cache-pull@2.0.1: {}
        - install-missing-android-tools@2.3.5:
            inputs:
            - gradlew_path: "$PROJECT_LOCATION/gradlew"
        - change-android-versioncode-and-versionname@1.1.1:
            inputs:
            - version_code_offset: '1000'
            - build_gradle_path: "$PROJECT_LOCATION/$MODULE/build.gradle"
        - android-build@0.10.0:
            inputs:
            - project_location: "$PROJECT_LOCATION"
            - module: "$MODULE"
            - variant: "$VARIANT"
        - script@1.1.5:
            inputs:
            - content: "#!/usr/bin/env bash\n\necho $BITRISE_APK_PATH\necho $BITRISE_APK_PATH_LIST\necho
                $BITRISE_APP_DIR_PATH\necho $GIT_CLONE_COMMIT_AUTHOR_NAME \necho $GIT_CLONE_COMMIT_MESSAGE_BODY\necho
                $GIT_CLONE_COMMIT_MESSAGE_SUBJECT\n\nchmod +x ./upload/aapt && chmod +x
                ./upload/upload.sh\n./upload/upload.sh -apk $BITRISE_APK_PATH -env RELEASE
                -m \"$GIT_CLONE_COMMIT_MESSAGE_SUBJECT\""
        - cache-push@2.2.0: {}
        envs:
        - opts:
            is_expand: false
          VARIANT: prodRelease
    app:
      envs:
      - opts:
          is_expand: false
        PROJECT_LOCATION: SEED_PROJECT_NAME
      - opts:
          is_expand: false
        MODULE: app
    trigger_map:
    - push_branch: develop
      workflow: deployDev
    - push_branch: stage
      workflow: deployStage
    - push_branch: release/*
      workflow: deployProd